1. mongoose -> https://mongoosejs.com/docs/geojson.html
2. expressValidator -> https://express-validator.github.io/docs/
3. Using async/await in ExpressJS middlewares -> https://www.acuriousanimal.com/blog/20180315/express-async-middleware
4. node-geocoder -> https://github.com/nchaulet/node-geocoder
5. Geospatial Query - Get Bootcamps Within Radius -> https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#mongodb-query-op.-centerSphere
6. API End Point with query parameter -> http://localhost:5000/api/v1/bootcamps?location.state=Uttar Pradesh&housing=true
7. Searching -> // API End Point -> /api/v1/bootcamps?location.state=Uttar Pradesh&housing=true
exports.getBootcamps=asyncHandler(async (req,res,next)=>{
       console.log(req.query); // { 'location.state': 'Uttar Pradesh', housing: 'true' }
       const bootcamps= await Bootcamp.find(req.query);
       res.status(200).json({success:true,data:bootcamps,count:bootcamps.length});
})
8. Query and Projection Operators In MongoDB Database -> https://docs.mongodb.com/manual/reference/operator/query/

9. Installing package as dev dependencies -> npm i -D morgan
 ------- =================================== Mongoose Query =========================== -------  
                        S.No                Methods                    default         comments

                         1.                  find({condation})            []           use to find more than one document

                         2.                  findOne({condation})         {}           only find one object matching the condition
Note :-
1.Mongoose hooks pre,post work on event such as save,remove -> examle we can use pre hook in hashing the password before inserting it in DB.
2.Methods attached with document -> we can attach methods on the document examle :- to generate token,to match password 
3.Schema -> compile ->Model (blueprint for document) -> document                                             
4.we will attach methods and hooks on schema level.
5.When there is requirement of aggregate to find sum,average etc ..... use statics ,we can also use statics to make such function which will run inside hooks 

                                 =================  API Security  ============================
1. NOSQL Injection :- https://medium.com/rangeforce/nosql-injection-6514a8db29e3 ,https://www.netsparker.com/blog/web-security/what-is-nosql-injection/.
2. Protection from nosql-injection ->use express-mongo-sanitize package.
3. Cross-site scripting ->  Cross-site scripting, often abbreviated as XSS, is a type of attack in which malicious scripts are injected into websites and web applications for the purpose of running on the end user's device. During this process, unsanitized or unvalidated inputs (user-entered data) are used to change outputs.
link :-  https://www.ptsecurity.com/ww-en/analytics/knowledge-base/what-is-a-cross-site-scripting-xss-attack/
4. Protection from Cross-site scripting :- use xss-clean package.
5. HTTP Parameter Pollution attacks :- https://levelup.gitconnected.com/prevent-parameter-pollution-in-node-js-f0794b4650d2
6. Protection from Parameter Pollution attacks :- use hpp  package.

//--------------------------------------------------------------------------------------------------------
## Tools
- Node.js - https://nodejs.org/en/
- VSCode - https://code.visualstudio.com/
- Postman - https://www.getpostman.com/
- Git - https://git-scm.com/
- MongoDB - https://www.mongodb.com/
- MailTrap - https://mailtrap.io/
- Docgen - https://github.com/thedevsaddam/docgen
- MapQuest Dev API - https://developer.mapquest.com/

## NPM Packages

- dotenv - https://github.com/motdotla/dotenv#readme
- morgan - https://github.com/expressjs/morgan
- colors - https://github.com/Marak/colors.js
- slugify - https://github.com/simov/slugify
- node-geocoder - https://github.com/nchaulet/node-geocoder
- bcryptjs - https://github.com/dcodeIO/bcrypt.js#readme
- jsonwebtoken - https://github.com/auth0/node-jsonwebtoken
- nodemailer - https://nodemailer.com/about/
- express-mongo-sanitize - https://github.com/fiznool/express-mongo-sanitize#readme
- xss-clean - https://github.com/jsonmaur/xss-clean
- helmet - https://github.com/helmetjs/helmet
- hpp - https://github.com/analog-nico/hpp
- express-rate-limit - https://github.com/nfriedly/express-rate-limit
- cors - https://github.com/expressjs/cors
- pm2 - https://github.com/Unitech/pm2

## Other Info
- Deployment Gist - https://gist.github.com/bradtraversy/cd90d1ed3c462fe3bddd11bf8953a896
- Digital Ocean Website ($10 Referral Link) - https://m.do.co/c/5424d440c63a
- SSH Key Setup - https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2
- HTTP Status Codes - https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
- HTTP Request Methods - https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
- JWT - https://jwt.io/
- Security Packages Article - https://hackernoon.com/express-js-important-npm-packages-related-to-security-2393466e18d5
- NoSQL Injection Article - https://blog.websecurify.com/2014/08/hacking-nodejs-and-mongodb.html

## Express Docs

- Main Website - https://expressjs.com/
- Requests - https://expressjs.com/en/4x/api.html#req
- Responses - https://expressjs.com/en/4x/api.html#res
- Middleware - https://expressjs.com/en/guide/using-middleware.html
- Routing - https://expressjs.com/en/guide/routing.html
- Error Handling - https://expressjs.com/en/guide/error-handling.html
- Static Files - https://expressjs.com/en/starter/static-files.html

## Mongoose Docs

- Main Website - https://mongoosejs.com/
- Connections - https://mongoosejs.com/docs/connections.html
- Models/Schemas -https://mongoosejs.com/docs/models.html
- Middleware - https://mongoosejs.com/docs/middleware.html
- Aggregate - https://mongoosejs.com/docs/api/aggregate.html#aggregate_Aggregate
- Relationships & Populate - https://mongoosejs.com/docs/populate.html
- Virtuals - https://mongoosejs.com/docs/guide.html#virtuals
- Statics - https://mongoosejs.com/docs/guide.html#statics
document link https://documenter.getpostman.com/view/18767551/UVRDGkoa


